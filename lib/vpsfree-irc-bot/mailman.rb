require 'mail'

module VpsFree::Irc::Bot
  module MailMan
    class Watcher
      attr_accessor :archive_dir

      def initialize
        @lists = []
      end

      # @param opts [Hash]
      # @option opts [String] server
      # @option opts [Integer] port
      # @option opts [String] user_name
      # @option opts [String] password
      # @option opts [Boolean] enable_ssl
      def server=(opts)
        ::Mail.defaults do
          retriever_method(:pop3, opts)
        end
      end

      # @param opts [Hash]
      # @option opts [String] name
      # @option opts [String] id List-Id header
      # @option opts [String] prefix subject prefix
      # @option opts [Symbol] method callback name
      def list(opts)
        @lists << MailingList.new(opts, @archive_dir)
      end

      # @param plugin [Cinch::Plugin] plugin instance
      def check(plugin)
        ::Mail.find_and_delete.each do |m|
          list = @lists.detect { |list| list.belongs?(m) }

          unless list
            warn "Stray message '#{m.subject}'" unless list
            next
          end

          list.process(m, plugin)
        end
      end
    end

    class MailingList
      attr_reader :name, :id, :prefix

      def initialize(opts, archive_dir)
        @archive_dir = archive_dir
        opts.each { |k, v| instance_variable_set("@#{k}", v) }
      end

      def belongs?(m)
        m['List-Id'].to_s.strip == @id.strip
      end

      def process(m, plugin)
        plugin.send(@method, self, m, find_message_url(m))
      end
      
      # This method tries to find HTML file with the archived message.
      # `outage_mail[archive_dir]` must be set in config in order for this to work.
      # The `archive_dir` must contain archive files from Mailman 2. If the search is
      # unsuccessful, base URL to the archive is returned.
      #
      # The search is based on the fact that the HTML files generated by Mailman
      # contain the value of header `Message-ID`.
      def find_message_url(m)
        url = m['List-Archive'].to_s[1..-2]

        return url unless @archive_dir
        
        dir = File.join(
          @archive_dir,
          @name,
          Time.now.strftime('%Y-%B'),
        )
        search = URI.escape(m['Message-ID'].to_s) \
          .gsub('@', '%40') \
          .gsub('+', '%2B') \
          .gsub('=', '%3D')
        
        f = `grep -r -l -m 1 '#{search}' "#{dir}"/*.html`.strip

        return File.join(url, *f.split('/')[-2..-1]) unless f.empty?
        return url
      end
    end

    module ClassMethods
      # @yieldparam [Watcher]
      def mailman(&block)
        watcher = Watcher.new

        define_method(:mailman_setup) { instance_exec(watcher, &block) }
        define_method(:mailman_timer) { watcher.check(self) }

        timer(0, method: :mailman_setup, shots: 1, threaded: false)
        timer(60, method: :mailman_timer, threaded: false)

        watcher
      end
    end

    def self.included(klass)
      klass.send(:extend, ClassMethods)
    end
  end
end
